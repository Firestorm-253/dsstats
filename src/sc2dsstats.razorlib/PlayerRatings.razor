@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization;
@using pax.dsstats.shared
@using pax.dsstats.shared.Raven;
@using sc2dsstats.razorlib.Services
@inject IDataService dataService
@implements IDisposable

<style>
    .tableFixHead {
        overflow-y: auto;
        height: 800px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div class="@(Interest == null ? "" : "visually-hidden")">
    <div class="d-flex">
        <EditForm EditContext="editContext">
            <div class="row">
                <div class="col-auto">
                    <label class="form-label">
                        Search:
                        <InputText class="form-control" @bind-Value="RatingsRequest.Search"></InputText>
                    </label>
                </div>
                <div class="col-auto">
                    <label class="form-label">
                        Mode
                        <InputSelect class="form-select" @bind-Value="RatingsRequest.Type">
                            <option value="@RatingType.Cmdr" selected>Cmdr</option>
                            <option value="@RatingType.Std">Std</option>
                        </InputSelect>
                    </label>

                </div>
            </div>
        </EditForm>
        <div class="align-self-center ms-2">
            <span class="oi oi-x text-danger pointer" @onclick="ResetSearch"></span>
        </div>
        <div class="ms-3 align-self-center">
            <a href="https://github.com/ipax77/dsstats/wiki/Mmr-calculation"><span class="oi oi-info me-1"></span>Calculation</a>
        </div>
    </div>
    <div class="tableFixHead">
        <table class="table table-dark table-hover table-striped w-auto">
            <colgroup>
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
                <col class="col">
            </colgroup>
            <thead style="user-select: none;">
                <CascadingValue Value="RatingsRequest.Orders">
                    <tr>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "RegionId"))">
                            <SortArrow Property="RegionId">
                                <div class="text-center">
                                    <span class="oi oi-globe rounded-circle bg-primary p-1"></span>
                                </div>
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Name"))">
                            <SortArrow Property="Name">
                                Name
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Rating.Main"))">
                            <SortArrow Property="Rating.Main">
                                Main
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Rating.MainPercentage"))">
                            <SortArrow Property="Rating.MainPercentage">
                                Main %
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Rating.Games"))">
                            <SortArrow Property="Rating.Games">
                                Games
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer text-warning" @onclick="@(e => SortList(e, "Rating.Mmr"))">
                            <SortArrow Property="Rating.Mmr">
                                Rating
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Rating.Wins"))">
                            <SortArrow Property="Rating.Wins">
                                Winrate
                            </SortArrow>
                        </th>
                        <th scope="col" class="pointer" @onclick="@(e => SortList(e, "Rating.Mvp"))">
                            <SortArrow Property="Rating.Mvp">
                                Mvp
                            </SortArrow>
                        </th>
                    </tr>
                </CascadingValue>
            </thead>
            <tbody>
                @if (ratingsCount > 0)
                {
                    <Virtualize @ref="virtualize" Context="player" ItemsProvider="LoadRatings" OverscanCount="10" ItemSize="41">
                        <ItemContent>
                            <tr height="41px;" class="pointer" @onclick="e => LoadPlayerChart(player)">
                                <td>
                                    <span>@Data.GetRegionString(player.RegionId)</span>
                                </td>
                                <td><span class="text-truncate text-info" style="display: block; width: 150px;">@player.Name</span></td>
                                <td>@(player.Rating.MainPercentage < 9 ? "Random" : player.Rating.Main.ToString())</td>
                                <td>@player.Rating.MainPercentage.ToString("N2", CultureInfo.InvariantCulture)</td>
                                <td class="border-start">@player.Rating.Games</td>
                                <td class="text-warning">@Math.Round(player.Rating.Mmr, 2).ToString(CultureInfo.InvariantCulture)</td>
                                <td>@HelperService.GetPercentageString(player.Rating.Wins, player.Rating.Games)</td>
                                <td>@HelperService.GetPercentageString(player.Rating.Mvp, player.Rating.Games)</td>
                            </tr>
                        </ItemContent>
                        <Placeholder>
                            <tr height="41px"><td colspan="12">Loading ...</td></tr>
                        </Placeholder>
                    </Virtualize>
                }
            </tbody>
        </table>
    </div>
    <div class="">
        <div class="btn-block">
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="@(() => DistributionRequest = DistributionRequestEnum.Std)">Std Distribution</button>
            <button type="button" class="btn btn-sm btn-outline-light" @onclick="@(() => DistributionRequest = DistributionRequestEnum.Cmdr)">Cmdr Distribution</button>
            @if (DistributionRequest != DistributionRequestEnum.None)
            {
                <button type="button" class="btn btn-sm btn-outline-warning" @onclick="@(() => DistributionRequest = DistributionRequestEnum.None)">Close</button>
            }
        </div>
        @if (DistributionRequest == DistributionRequestEnum.Std)
        {
            <div>
                <PlayerRatingsDeviation @ref="playerRatingsDeviation" Std="true"></PlayerRatingsDeviation>
            </div>
        }
        else if (DistributionRequest == DistributionRequestEnum.Cmdr)
        {
            <div>
                <PlayerRatingsDeviation @ref="playerRatingsDeviation" Std="false"></PlayerRatingsDeviation>
            </div>
        }
    </div>
</div>

@if (Interest != null)
{
    <PlayerDetailsComponent RequestNames="Interest" OnCloseRequested="DetailsClose"></PlayerDetailsComponent>
}


@code {
    [Parameter]
    [EditorRequired]
    public RatingsRequest RatingsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRatingsChanged { get; set; }

    private int ratingsCount = 100;
    private PlayerRatingsDeviation? playerRatingsDeviation;
    private Virtualize<RavenPlayerDto>? virtualize;
    private DistributionRequestEnum DistributionRequest = DistributionRequestEnum.None;

    private EditContext editContext = null!;

    private RequestNames? Interest;

    protected override void OnInitialized()
    {
        editContext = new EditContext(RatingsRequest);
        editContext.OnFieldChanged += FieldChanged;
        _ = LoadInitialPlayerInfo();

        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _ = Reload();
    }

    public async Task Reload()
    {
        ratingsCount = 100;
        await InvokeAsync(() => StateHasChanged());
        if (virtualize != null)
        {
            await virtualize.RefreshDataAsync();
        }
        await InvokeAsync(() => StateHasChanged());
        if (playerRatingsDeviation != null)
        {
            await playerRatingsDeviation.LoadData();
        }
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = RatingsRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                RatingsRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            RatingsRequest.Orders.Clear();
            RatingsRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    private async ValueTask<ItemsProviderResult<RavenPlayerDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        RatingsRequest.Skip = request.StartIndex;
        RatingsRequest.Take = numRatings;
        var result = await dataService.GetRatings(RatingsRequest, request.CancellationToken);
        ratingsCount = result.Count;


        return new ItemsProviderResult<RavenPlayerDto>(result.Players, ratingsCount);
    }

    private void DetailsClose()
    {
        Interest = null;
        RatingsRequest.ToonId = null;
        OnRatingsChanged.InvokeAsync();
        StateHasChanged();
    }

    private async Task LoadInitialPlayerInfo()
    {
        if (RatingsRequest.ToonId != null && RatingsRequest.ToonId > 0)
        {
            Interest = new() { Name = "", ToonId = RatingsRequest.ToonId.Value };
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void LoadPlayerChart(RavenPlayerDto playerRatingDto)
    {
        Interest = new() { Name = playerRatingDto.Name, ToonId = playerRatingDto.ToonId };
        RatingsRequest.ToonId = playerRatingDto.ToonId;
        StateHasChanged();
        OnRatingsChanged.InvokeAsync();
    }

    public enum DistributionRequestEnum
    {
        None = 0,
        Std = 1,
        Cmdr = 2
    }

    private void ResetSearch()
    {
        RatingsRequest.Search = null;
        _ = Reload();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}
