@using Microsoft.AspNetCore.Components.Web.Virtualization;
@using Microsoft.AspNetCore.Components.Forms
@using System.Globalization;
@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@inject IDataService dataService
@implements IDisposable

<style>
    .tableFixHead {
        overflow-y: auto;
        height: 800px;
    }

        .tableFixHead thead th {
            position: sticky;
            top: 0;
        }

    table {
        border-collapse: collapse;
        width: 100%;
    }

    th, td {
        padding: 8px 16px;
        white-space: nowrap;
    }

    th {
        background: purple;
    }

    .tablebackground {
        position: absolute;
        z-index: -1;
        opacity: 0.15;
    }
</style>

<div class="@(Interest == null ? "" : "visually-hidden")">
    <h4>Player Ratings</h4>

    <div class="d-flex">
        <EditForm EditContext="editContext">
            <div class="row">
                <div class="col-auto">
                    <label class="form-label">
                        Search:
                        <InputText class="form-control" @bind-Value="RatingsRequest.Search"></InputText>
                    </label>
                </div>
            </div>
        </EditForm>
        <div class="align-self-center ms-2">
            <span class="oi oi-x text-danger pointer" @onclick="ResetSearch"></span>
        </div>
    </div>
    <div class="row">
        <div class="col-auto tableFixHead">
            <table class="table table-dark table-hover">
                <colgroup>
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                    <col class="col">
                </colgroup>
                <thead>
                    <CascadingValue Value="RatingsRequest.Orders">
                        <tr>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "ToonId"))">
                                <SortArrow Property="ToonId">
                                    ToonId
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer text-info" @onclick="@(e => SortList(e, "Name"))">
                                <SortArrow Property="Name">
                                    Name
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GamesCmdr"))">
                                <SortArrow Property="GamesCmdr">
                                    Cmdr Games
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer text-warning" @onclick="@(e => SortList(e, "Mmr"))">
                                <SortArrow Property="Mmr">
                                    Cmdr Rating
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinrateCmdr"))">
                                <SortArrow Property="WinrateCmdr">
                                    Cmdr Winrate
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "MvprateCmdr"))">
                                <SortArrow Property="MvprateCmdr">
                                    Cmdr Mvp
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "TeamgamesCmdr"))">
                                <SortArrow Property="TeamgamesCmdr">
                                    Cmdr Teamgames
                                </SortArrow>
                            </th>

                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "GamesStd"))">
                                <SortArrow Property="GamesStd">
                                    Std Games
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer text-warning" @onclick="@(e => SortList(e, "MmrStd"))">
                                <SortArrow Property="MmrStd">
                                    Std Rating
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "WinrateStd"))">
                                <SortArrow Property="WinrateStd">
                                    Std Winrate
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "MvprateStd"))">
                                <SortArrow Property="MvprateStd">
                                    Std Mvp
                                </SortArrow>
                            </th>
                            <th scope="col" class="pointer" @onclick="@(e => SortList(e, "TeamgamesStd"))">
                                <SortArrow Property="TeamgamesStd">
                                    Std Teamgames
                                </SortArrow>
                            </th>
                        </tr>
                    </CascadingValue>
                </thead>
                <tbody>
                    @if (ratingsCount > 0)
                    {
                        <Virtualize @ref="virtualize" Context="rating" ItemsProvider="LoadRatings">
                            <tr class="pointer" @onclick="e => LoadPlayerChart(rating)">
                                <td>@rating.ToonId</td>
                                <td><span class="text-truncate text-info" style="display: block; width: 150px;">@rating.Name</span></td>
                                <td>@rating.GamesCmdr</td>
                                <td class="text-warning">@Math.Round(rating.Mmr, 2).ToString(CultureInfo.InvariantCulture)</td>
                                <td>@HelperService.GetPercentageString(rating.WinsCmdr, rating.GamesCmdr)</td>
                                <td>@HelperService.GetPercentageString(rating.MvpCmdr, rating.GamesCmdr)</td>
                                <td>@HelperService.GetPercentageString(rating.TeamGamesCmdr, rating.GamesCmdr)</td>
                                <td>@rating.GamesStd</td>
                                <td class="text-warning">@Math.Round(rating.MmrStd, 2).ToString(CultureInfo.InvariantCulture)</td>
                                <td>@HelperService.GetPercentageString(rating.WinsStd, rating.GamesStd)</td>
                                <td>@HelperService.GetPercentageString(rating.MvpStd, rating.GamesStd)</td>
                                <td>@HelperService.GetPercentageString(rating.TeamGamesStd, rating.GamesStd)</td>
                            </tr>
                        </Virtualize>
                    }
                </tbody>
            </table>
        </div>
        <div class="col-auto">
            <div class="btn-block">
                <button type="button" class="btn btn-sm btn-outline-light" @onclick="@(() => DistributionRequest = DistributionRequestEnum.Std)">Std Distribution</button>
                <button type="button" class="btn btn-sm btn-outline-light" @onclick="@(() => DistributionRequest = DistributionRequestEnum.Cmdr)">Cmdr Distribution</button>
                @if (DistributionRequest != DistributionRequestEnum.None)
                {
                    <button type="button" class="btn btn-sm btn-outline-warning" @onclick="@(() => DistributionRequest = DistributionRequestEnum.None)">Close</button>
                }
            </div>
            @if (DistributionRequest == DistributionRequestEnum.Std)
            {
                <div>
                    <PlayerRatingsDeviation @ref="playerRatingsDeviation" Std="true"></PlayerRatingsDeviation>
                </div>
            }
            else if (DistributionRequest == DistributionRequestEnum.Cmdr)
            {
                <div>
                    <PlayerRatingsDeviation @ref="playerRatingsDeviation" Std="false"></PlayerRatingsDeviation>
                </div>
            }
        </div>
    </div>
</div>

@if (Interest != null)
{
    <PlayerDetailsComponent PlayerRatingDto="Interest" OnCloseRequested="DetailsClose"></PlayerDetailsComponent>
}


@code {
    [Parameter]
    [EditorRequired]
    public RatingsRequest RatingsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRatingsChanged { get; set; }

    private int ratingsCount = 0;
    private PlayerRatingsDeviation? playerRatingsDeviation;
    private Virtualize<PlayerRatingDto>? virtualize;
    private DistributionRequestEnum DistributionRequest = DistributionRequestEnum.None;

    private EditContext editContext = null!;

    private PlayerRatingDto? Interest;

    protected override void OnInitialized()
    {
        editContext = new EditContext(RatingsRequest);
        editContext.OnFieldChanged += FieldChanged;
        _ = SetCount();
        _ = LoadInitialPlayerInfo();

        base.OnInitialized();
    }

    private void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _ = Reload();
    }

    public async Task Reload()
    {
        await SetCount();
        await InvokeAsync(() => StateHasChanged());
        if (virtualize != null)
        {
            await virtualize.RefreshDataAsync();
        }
        await InvokeAsync(() => StateHasChanged());
        if (playerRatingsDeviation != null)
        {
            await playerRatingsDeviation.LoadData();
        }
    }

    private async Task SetCount()
    {
        ratingsCount = await dataService.GetRatingsCount(RatingsRequest);
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task SortList(MouseEventArgs e, string property)
    {
        var exOrder = RatingsRequest.Orders.FirstOrDefault(f => f.Property == property);
        if (e.ShiftKey)
        {
            if (exOrder == null)
            {
                RatingsRequest.Orders.Add(new TableOrder()
                    {
                        Property = property
                    });
            }
            else
            {
                exOrder.Ascending = !exOrder.Ascending;
            }
        }
        else
        {
            RatingsRequest.Orders.Clear();
            RatingsRequest.Orders.Add(new TableOrder()
                {
                    Property = property,
                    Ascending = exOrder == null ? false : !exOrder.Ascending
                });
        }
        await Reload();
    }

    private async ValueTask<ItemsProviderResult<PlayerRatingDto>> LoadRatings(ItemsProviderRequest request)
    {
        var numRatings = Math.Min(request.Count, ratingsCount - request.StartIndex);
        RatingsRequest.Skip = request.StartIndex;
        RatingsRequest.Take = numRatings;
        var ratings = await dataService.GetRatings(RatingsRequest, request.CancellationToken);

        return new ItemsProviderResult<PlayerRatingDto>(ratings, ratingsCount);
    }

    private void DetailsClose()
    {
        Interest = null;
        RatingsRequest.ToonId = null;
        OnRatingsChanged.InvokeAsync();
        StateHasChanged();
    }

    private async Task LoadInitialPlayerInfo()
    {
        if (RatingsRequest.ToonId != null && RatingsRequest.ToonId > 0)
        {
            Interest = await dataService.GetPlayerRating(RatingsRequest.ToonId.Value);
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void LoadPlayerChart(PlayerRatingDto playerRatingDto)
    {
        Interest = playerRatingDto;
        RatingsRequest.ToonId = playerRatingDto.ToonId;
        StateHasChanged();
        OnRatingsChanged.InvokeAsync();
    }

    public enum DistributionRequestEnum
    {
        None = 0,
        Std = 1,
        Cmdr = 2
    }

    private void ResetSearch()
    {
        RatingsRequest.Search = null;
        _ = Reload();
    }

    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
    }
}
