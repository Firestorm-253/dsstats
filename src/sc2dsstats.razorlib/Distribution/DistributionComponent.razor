@using pax.dsstats.shared
@using pax.BlazorChartJs
@inject IDataService dataService
@implements IDisposable

<div>
    <CascadingValue Value="Request">
        <DistributionRequestComponent OnRequestChanged="LoadData"></DistributionRequestComponent>
    </CascadingValue>
</div>
<div>
    <h3>Distirbution @Data.GetRatingTypeLongName(Request.RatingType) @Data.GetTimePeriodLongName(Request.TimePeriod)</h3>
</div>
<div class="col-auto" style="min-width: 500px; width: 35vw; min-height: 250px; height: calc(35vw * 0.5);">
    <ChartComponent ChartJsConfig="chartConfig" OnEventTriggered="ChartEventTriggered"></ChartComponent>
</div>

@code {
    [Parameter, EditorRequired]
    public DistributionRequest Request { get; set; } = default!;

    private DistributionResponse? response;
    private CancellationTokenSource cts = new();
    private ChartJsConfig chartConfig = null!;
    private bool chartReady;
    private bool dataReady;

    protected override void OnInitialized()
    {
        chartConfig = GetChartConfig();
        _ = LoadData();
        base.OnInitialized();
    }

    private async Task LoadData()
    {
        response = await dataService.GetDistribution(Request, cts.Token);
        dataReady = true;
        if (chartReady && dataReady)
        {
            SetupChart();
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private void ChartEventTriggered(ChartJsEvent chartJsEvent)
    {
        if (chartJsEvent is ChartJsInitEvent initEvent)
        {
            chartReady = true;
            if (chartReady && dataReady)
            {
                SetupChart();
            }
        }
    }

    private void SetupChart()
    {
        if (response == null)
        {
            return;
        }

        if (chartConfig.Options?.Plugins?.Title != null)
        {
            chartConfig.Options.Plugins.Title.Text 
                = new IndexableOption<string>($"{Request.RatingType} distribution");
        }

        if (chartConfig.Data.Datasets.Any())
        {
            chartConfig.RemoveDatasets(chartConfig.Data.Datasets);
        }

        chartConfig.SetLabels(response.MmrDevs.Select(s => s.Mmr.ToString()).ToList());
        chartConfig.AddDataset(GetLineDataset(response.MmrDevs.Select(s => s.Count).ToList()));
    }

    private LineDataset GetLineDataset(List<int> ratings)
    {
        return new()
        {
            Label = "",
            Data = new List<object>(ratings.Cast<object>()),
            BackgroundColor = "#4E58A0",
            BorderColor = "#4E58A0",
            BorderWidth = 4,
            Fill = false,
            PointBackgroundColor = new IndexableOption<string>("blue"),
            PointBorderColor = new IndexableOption<string>("blue"),
            PointRadius = new IndexableOption<double>(1),
            PointBorderWidth = new IndexableOption<double>(1),
            PointHitRadius = new IndexableOption<double>(1),
            Tension = 0.4,
        };
    }

    private ChartJsConfig GetChartConfig()
    {
        return new()
            {
                Type = ChartType.line,
                Data = new ChartJsData()
                {
                    Labels = new List<string>()
                    {
                    },
                    Datasets = new List<ChartJsDataset>()
                    {
                    }
                },
                Options = new ChartJsOptions()
                {
                    Responsive = true,
                    MaintainAspectRatio = true,
                    Plugins = new Plugins()
                    {
                        ArbitraryLines = new List<ArbitraryLineConfig>(),
                        Title = new Title()
                        {
                            Display = true,
                            Text = new IndexableOption<string>($"{Request.RatingType} distribution"),
                            Color = "#4E58A0",
                            Font = new Font()
                            {
                                Size = 16,
                            }
                        }
                    },
                    Interaction = new Interactions()
                    {
                        Intersect = false,
                        Mode = "index"
                    },
                    Scales = new ChartJsOptionsScales()
                    {
                        X = new LinearAxis()
                        {
                            Display = true,
                            Ticks = new LinearAxisTick()
                            {
                                Color = "lightgrey",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Title = new Title()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Rating"),
                                Color = "#4E58A0"
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B"
                            }
                        },
                        Y = new LinearAxis()
                        {
                            Display = true,
                            Title = new Title()
                            {
                                Display = true,
                                Text = new IndexableOption<string>("Count"),
                                Color = "#4E58A0"
                            },
                            Ticks = new LinearAxisTick()
                            {
                                Color = "#4E58A0",
                                Padding = 3,
                                AutoSkipPadding = 3,
                                BackdropColor = "rgba(255, 255, 255, 0.75)",
                                Align = "center",
                                CrossAlign = "near",
                                ShowLabelBackdrop = false,
                                BackdropPadding = new Padding(2)
                            },
                            Grid = new ChartJsGrid()
                            {
                                Display = true,
                                Color = "#6B6B6B",
                                LineWidth = 1,
                                DrawBorder = true,
                                DrawOnChartArea = true,
                                TickLength = 8,
                                TickWidth = 1,
                                TickColor = "#4E58A0",
                                Offset = false,
                                BorderWidth = 1,
                                BorderColor = "#6B6B6B",
                            }
                        }
                    }
                }
            };
    }

    public void Dispose()
    {
        cts.Cancel();
        cts.Dispose();
    }
}
