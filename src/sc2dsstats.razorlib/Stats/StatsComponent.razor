@using Microsoft.Extensions.Logging
@using pax.dsstats.shared;
@using sc2dsstats.razorlib.Services;
@inject IDataService dataService

<div>
    <CascadingValue Value="StatsRequest">
        <StatsRequestComponent OnRequestChanged="RequestChanged" OnChartOptionsChanged="ChartOptionsChanged" IsMaui="IsMaui"></StatsRequestComponent>
    </CascadingValue>
</div>

<div class="d-flex mb-1">
    @if (statsResponse == null)
    {
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Replays: 0</span>
        </div>
        <div>
            <span class="badge bg-info" style="font-size: 1rem;">Filtered: 0</span>
        </div>
    }
    else
    {
        <div>
            <span class="badge text-bg-primary display-block" style="font-size: 1rem;">Replays<br />@(StatsRequest.DefaultFilter ? statsResponse.CountResponse.DefaultFilter : statsResponse.CountResponse.Count)</span>
        </div>
        <div>
            <span class="badge text-bg-primary display-block text-success ms-1" style="font-size: 1rem;">Filtered<br />@(StatsRequest.DefaultFilter ? statsResponse.CountResponse.Count - statsResponse.CountResponse.DefaultFilter : 0)</span>
        </div>
        <div>
            <span class="badge text-bg-primary display-block text-warning ms-1" style="font-size: 1rem;">Leaver<br />@statsResponse.CountResponse.Leaver</span>
        </div>
        <div>
            <span class="badge text-bg-primary display-block text-danger ms-1" style="font-size: 1rem;">Quits<br />@statsResponse.CountResponse.Quits</span>
        </div>
        <div>
            <span class="badge text-bg-primary display-block ms-1" style="font-size: 1rem;">∅ @statsResponse.Request.StatsMode<br />@HelperService.GetPercentageString(statsResponse.Items.Sum(s => s.Wins), statsResponse.Items.Sum(s => s.Matchups))</span>
        </div>
        @if (statsResponse.AvgDuration > 0)
        {
            <div>
                <span class="badge text-bg-primary text-light display-block ms-1" style="font-size: 1rem;">∅ Duration<br />@TimeSpan.FromSeconds(statsResponse.AvgDuration).ToString(@"mm\:ss")min</span>
            </div>
        }
    }
    @if (isLoading)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden" style="font-size: 1rem;">Loading...</span>
        </div>
    }
</div>

<div class="row">
    <div class="col-auto">
        <CascadingValue Value="statsResponse">

            <StatsTable OnCommanderClicked="CommanderClicked"></StatsTable>
        </CascadingValue>
    </div>
    <div class="col-7">
        <StatsChartComponent @ref="statsChartComponent" IsMaui="IsMaui" OnLabelClicked="CommanderClicked"></StatsChartComponent>
    </div>
</div>



@code {
    [Parameter]
    [EditorRequired]
    public StatsRequest StatsRequest { get; set; } = default!;

    [Parameter]
    public EventCallback OnRequestChanged { get; set; }

    [Parameter]
    public bool IsMaui { get; set; }

    private bool isLoading = false;
    private StatsResponse statsResponse = new();
    private object lockobject = new();

    StatsChartComponent? statsChartComponent;

    protected override void OnInitialized()
    {
        _ = LoadData(true);
        base.OnInitialized();
    }

    public void ChartOptionsChanged()
    {
        statsChartComponent?.SetBeginAtZero(StatsRequest.BeginAtZero);
    }

    private void RequestChanged()
    {
        _ = LoadData();
    }

    private void CommanderClicked(Commander cmdr)
    {
        StatsRequest.Interest = cmdr;
        _ = LoadData();
    }

    public async Task LoadData(bool init = false)
    {
        lock (lockobject)
        {
            if (isLoading)
            {
                return;
            }
            isLoading = true;
        }

        if (StatsRequest.StatsMode == StatsMode.Timeline || StatsRequest.StatsMode == StatsMode.Synergy || StatsRequest.StatsMode == StatsMode.Duration)
        {
            if (StatsRequest.Interest == Commander.None)
            {
                StatsRequest.Interest = Commander.Abathur;
            }
        }

        statsChartComponent?.PrepareChart(StatsRequest, false);

        await InvokeAsync(() => StateHasChanged());
        statsResponse = await dataService.GetStats(StatsRequest);

        statsResponse.Request.BeginAtZero = StatsRequest.BeginAtZero;

        isLoading = false;
        await InvokeAsync(() => StateHasChanged());

        statsChartComponent?.SetupChart(statsResponse);

        if (!init)
        {
            await OnRequestChanged.InvokeAsync();
        }
    }
}
