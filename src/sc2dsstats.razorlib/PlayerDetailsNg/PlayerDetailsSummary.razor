@using pax.dsstats.shared
@using sc2dsstats.razorlib.Services
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using sc2dsstats.razorlib.PlayerDetails
@inject IDataService dataService
@implements IDisposable

<div>
    <div class="d-flex flex-row bg-secondary">
        <div class="p-2">
            <span class="oi oi-x text-danger pointer" style="font-size: 1.5rem; z-index: 1000;"
                @onclick="(() => OnCloseRequested.InvokeAsync())"></span>
        </div>
        <div class="ms-1 p-2 mt-2">
            <span class="border rounded p-1">@Data.GetRegionString(RequestNames.RegionId)</span>
        </div>
        <div class="p-2">
            <h3 class="text-warning fw-bold">@RequestNames.Name Details</h3>
        </div>
        @if (isLoading)
        {
            <div class="p-2 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        @if (isUploader)
        {
            <div class="p-2 mt-2">
                <span class="badge bg-success">Uplaoder</span>
            </div>
        }
        <div class="p-2">
            <button type="button" class="btn btn-outline-light" @onclick="ShowReplays">Replays</button>
        </div>
    </div>
    @if (playerSummary != null)
    {
        <div class="row mt-1">
            @foreach (var interestRating in playerSummary.Ratings.OrderBy(o => o.RatingType))
            {
                <div class="col-auto">
                    <span class="badge bg-primary" style="font-size: 1.2rem;">
                        <span class="small">@Data.GetRatingTypeLongName(interestRating.RatingType)</span>
                        <br />
                        <span class="text-warning">
                            <span class="small text-danger">#@interestRating.Pos </span>
                            @interestRating.Rating.ToString("N2", CultureInfo.InvariantCulture)
                        </span>
                    </span>
                </div>
            }
        </div>
        <div class="row mt-2">
            <div class="col-auto">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-warning">GameModes Played</h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" style="max-height: 400px; overflow-y: auto; overflow-x: hidden;">
                            <table class="table table-sm table-striped table-dark w-auto">
                                <thead>
                                    <tr>
                                        <th>GameMode</th>
                                        <th>Players</th>
                                        <th>Games</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var gameMode in playerSummary.GameModesPlayed.OrderByDescending(o => o.Count))
                                    {
                                        <tr>
                                            <td>@gameMode.GameMode</td>
                                            <td>@HelperService.GetPlayerCountString(gameMode.PlayerCount)</td>
                                            <td>@gameMode.Count</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-auto">
                <div style="width: 500px; height: 500px;">
                    <PlayerCmdrChart CmdrInfos="playerSummary.Commanders"></PlayerCmdrChart>
                </div>
            </div>
        </div>
    }
    <div class="d-flex flex-row bg-secondary">
        <div class="p-1">
            <EditForm EditContext="editContext">
                <label class="form-label">
                    <InputSelect class="form-select" @bind-Value="RatingType">
                        @foreach (RatingType ratingType in Enum.GetValues(typeof(RatingType)))
                        {
                            @if (ratingType == RatingType.None)
                            {
                                continue;
                            }
                            <option value="@ratingType">@Data.GetRatingTypeLongName(ratingType)</option>
                        }
                    </InputSelect>
                </label>
            </EditForm>
        </div>
        <div class="p-1">
            <h3 class="text-warning fw-bold">Rating Details</h3>
        </div>
        @if (isLoading)
        {
            <div class="p-1 spinner-border spinner-border-sm text-info mx-2 mt-2" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
    <div class="row mt-1">
        @if (playerRatingDetailsDto != null)
        {
            <div class="col-auto">
                <PlayerRatingChart @ref="playerRatingChart" PlayerRating="playerRatingDetailsDto"></PlayerRatingChart>
            </div>
            <div class="col-auto">
                <div class="card">
                    <div class="card-header">
                        <h4><span class="text-warning">Rating Info</span></h4>
                        <small>@Data.GetRatingTypeLongName(playerRatingDetailsDto.RatingType)</small>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-sm table-dark table-striped">
                                <tbody>
                                    <tr>
                                        <td>Rating games</td>
                                        <td colspan="2">@playerRatingDetailsDto.Games</td>
                                    </tr>
                                    <tr>
                                        <td>Main</td>
                                        <td>@(playerRatingDetailsDto.Games == 0 || playerRatingDetailsDto.MainCount * 100.0 / playerRatingDetailsDto.Games < 10.5 ? "Random" : playerRatingDetailsDto.Main.ToString())</td>
                                        <td>@HelperService.GetPercentageString(playerRatingDetailsDto.MainCount, playerRatingDetailsDto.Games)</td>
                                    </tr>
                                    <tr>
                                        <td>Winrate</td>
                                        <td colspan="2">@HelperService.GetPercentageString(playerRatingDetailsDto.Wins, playerRatingDetailsDto.Games)</td>
                                    </tr>
                                    <tr>
                                        <td>Mvp</td>
                                        <td colspan="2">@HelperService.GetPercentageString(playerRatingDetailsDto.Mvp, playerRatingDetailsDto.Games)</td>
                                    </tr>
                                    <tr>
                                        <td>Consistency</td>
                                        <td colspan="2">@playerRatingDetailsDto.Consistency.ToString("N2", CultureInfo.InvariantCulture)</td>
                                    </tr>
                                    <tr>
                                        <td>Confidence</td>
                                        <td colspan="2">@playerRatingDetailsDto.Confidence.ToString("N2", CultureInfo.InvariantCulture)</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            Rating Change
                                            <br />
                                            <small class="text-white-50">past 30 days</small>
                                        </td>
                                        <td colspan="2">
                                            @if (playerRatingDetailsDto.PlayerRatingChange != null)
                                            {
                                                <span class="@(playerRatingDetailsDto.PlayerRatingChange.Change30d >= 0 ? "oi oi-arrow-top text-success" : "oi oi-arrow-bottom text-danger")">
                                                    @playerRatingDetailsDto.PlayerRatingChange.Change30d.ToString("N2", CultureInfo.InvariantCulture)
                                                </span>
                                            }
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ratingDetails != null)
        {
            <div class="col-auto">
                <div class="card" style="min-width: 475px;">
                    <div class="card-header">
                        <div class="d-flex justify-content-between">
                            <div>
                                <h4><span class="text-warning">Matchups</span> <small>@Data.GetRatingTypeLongName(RatingType)</small></h4>
                            </div>
                            <div>
                                <span class="text-info">min 10 games</span>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive" style="min-width: 450px; max-height: 400px; overflow: auto;">
                            <MatchupsTable Matchups="ratingDetails.Matchups"></MatchupsTable>
                        </div>
                    </div>
                </div>
            </div>
            @if (ratingDetails.Teammates.Any())
            {
                <div class="col-auto mt-1">
                    <div class="card" style="min-width: 475px;">
                        <div class="card-header">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4><span class="text-warning">Teammates</span> <small>including the player</small></h4>
                                </div>
                                <div>
                                    <span class="text-info">min 10 games</span>
                                </div>
                            </div>
                            <small>@Data.GetRatingTypeLongName(RatingType)</small>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive" style="min-width: 450px; max-height: 400px; overflow: auto;">
                                <TeamTable TeamResults="ratingDetails.Teammates" ShowReplays="ShowWithReplays"></TeamTable>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (ratingDetails.Opponents.Any())
            {
                <div class="col-auto mt-1">
                    <div class="card" style="min-width: 475px;">
                        <div class="card-header">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h4><span class="text-warning">Opponents</span> <small>and their winrate</small></h4>
                                </div>
                                <div>
                                    <span class="text-info">min 10 games</span>
                                </div>
                            </div>
                            <small>@Data.GetRatingTypeLongName(RatingType)</small>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive" style="min-width: 450px; max-height: 400px; overflow: auto;">
                                <TeamTable TeamResults="ratingDetails.Opponents" ShowReplays="ShowVsReplays"></TeamTable>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-auto mt-1">
                <button type="button" class="btn btn-outline-warning mt-1" @onclick="LoadDetailData">More Details ..</button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public RequestNames RequestNames { get; set; } = default!;

    [Parameter]
    public RatingType RatingType { get; set; } = RatingType.Cmdr;

    [Parameter]
    public EventCallback OnCloseRequested { get; set; }
    [Parameter]
    public EventCallback<ReplaysToonIdRequest> ReplaysRequest { get; set; }

    CancellationTokenSource cts = new();
    bool isLoading;
    bool isUploader;
    PlayerDetailSummary? playerSummary;
    PlayerRatingDetails? ratingDetails;
    PlayerRatingDetailDto? playerRatingDetailsDto;
    PlayerRatingChart? playerRatingChart;

    EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(RatingType);
        editContext.OnFieldChanged += FieldChanged;
        _ = LoadData();
        base.OnInitialized();
    }

    public void FieldChanged(object? sender, FieldChangedEventArgs e)
    {
        _ = LoadDetailData();
    }

    public async Task LoadDetailData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        ratingDetails = await dataService.GetPlayerRatingDetails(RequestNames.ToonId, RatingType, cts.Token);
        playerRatingDetailsDto = playerSummary?.Ratings.FirstOrDefault(f => f.RatingType == RatingType);
        playerRatingChart?.UpdateChart(playerRatingDetailsDto);
        isLoading = false;
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task LoadData()
    {
        isLoading = true;
        await InvokeAsync(() => StateHasChanged());
        playerSummary = await dataService.GetPlayerSummary(RequestNames.ToonId, cts.Token);
        isLoading = false;
        if (playerSummary.Ratings.Any())
        {
            RequestNames.Name = playerSummary.Ratings[0].Player.Name;
            RequestNames.RegionId = playerSummary.Ratings[0].Player.RegionId;
            isUploader = playerSummary.Ratings[0].IsUploader;
            playerRatingDetailsDto = playerSummary.Ratings.FirstOrDefault(f => f.RatingType == RatingType);
            playerRatingChart?.UpdateChart(playerRatingDetailsDto);
        }
        await InvokeAsync(() => StateHasChanged());
    }

    private void ShowReplays()
    {
        ReplaysRequest.InvokeAsync(new()
            {
                Name = RequestNames.Name,
                ToonId = RequestNames.ToonId,
            });
    }

    private void ShowWithReplays(KeyValuePair<int, string?> playerInfo)
    {
        ReplaysRequest.InvokeAsync(new()
            {
                Name = RequestNames.Name,
                ToonId = RequestNames.ToonId,
                ToonIdWith = playerInfo.Key,
                ToonIdName = playerInfo.Value,
            });
    }

    private void ShowVsReplays(KeyValuePair<int, string?> playerInfo)
    {

        ReplaysRequest.InvokeAsync(new()
            {
                Name = RequestNames.Name,
                ToonId = RequestNames.ToonId,
                ToonIdVs = playerInfo.Key,
                ToonIdName = playerInfo.Value,
            });
    }


    public void Dispose()
    {
        editContext.OnFieldChanged -= FieldChanged;
        cts.Cancel();
        cts.Dispose();
    }
}