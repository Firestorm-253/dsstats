@using pax.dsstats.dbng.Repositories;
@using sc2dsstats.maui.Services;
@inject DecodeService DecodeService
@inject IReplayRepository ReplayRepository
@inject IToastService ToastService
@inject IJSRuntime jsRuntime
@implements IDisposable

<div id="decodeErrorModal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Replays failed decoding</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div>
                    <button type="button" class="btn btn-sm btn-warning" @onclick="SkipAll">Skip All</button>
                </div>
                <table class="table table-dark table-sm">
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var ent in DecodeService.errorReplays)
                        {
                            <tr>
                                <td><span class="fw-bold">@ent.Key</span></td>
                                <td>
                                    <button type="button" class="btn btn-sm btn-warning" @onclick="e => AddSkipReplay(ent.Key)">Skip next</button>
                                </td>
                            </tr>
                            <tr colspan="2">
                                <td>@ent.Value</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized()
    {
        DecodeService.ErrorRaised += DecodeService_ErrorRaised;
        base.OnInitialized();
    }

    private void DecodeService_ErrorRaised(object? sender, EventArgs e)
    {
        InvokeAsync(() => StateHasChanged());
    }

    private async Task AddSkipReplay(string replayPath)
    {
        await ReplayRepository.AddSkipReplay(replayPath);
        ToastService.ShowSuccess("Replay sucessfully added to skip list");
    }

    private async void SkipAll()
    {
        foreach (var ent in DecodeService.errorReplays)
        {
            await ReplayRepository.AddSkipReplay(ent.Key);
        }
    }

    public void Show()
    {
        jsRuntime.InvokeVoidAsync("ReplayModalOpen", "decodeErrorModal");
    }

    public void Dispose()
    {
        DecodeService.ErrorRaised -= DecodeService_ErrorRaised;
    }
}
