@page "/stats"
@inject DecodeService DecodeService
@inject IToastService toastService
@inject IRatingRepository ratingRepository
@implements IDisposable

@using pax.dsstats.dbng.Services;
@using pax.dsstats.shared;
@using sc2dsstats.maui.Services;
@using sc2dsstats.razorlib.Stats;

<PageTitle>Stats</PageTitle>

<sc2dsstats.razorlib.Stats.StatsComponent @ref="statsComponent"
    StatsRequest="statsRequest"
    IsMaui="true"
    DefaultPlayers="GetDefaultPlayers()">
</sc2dsstats.razorlib.Stats.StatsComponent>

@code {
    StatsRequest statsRequest = new()
    {
        StatsMode = StatsMode.Winrate,
        Uploaders = true,
        DefaultFilter = true,
        GameModes = new List<GameMode>() { GameMode.Commanders, GameMode.CommandersHeroic }
    };
    private StatsComponent? statsComponent;

    protected override void OnInitialized()
    {
        (statsRequest.StartTime, statsRequest.EndTime) = Data.TimeperiodSelected("This Year");
        statsRequest.TimePeriod = "This Year";

        DecodeService.DecodeStateChanged += DecodeStateChanged;

        base.OnInitialized();
    }

    private void DecodeStateChanged(object? sender, DecodeEventArgs e)
    {
        if (e.Done)
        {
            _ = statsComponent?.LoadData();
        }
    }

    private List<RequestNames> GetDefaultPlayers()
    {
        List<RequestNames> requestNames = new();

        foreach (var name in UserSettingsService.UserSettings.PlayerNames)
        {
            var toonIds = ratingRepository.GetNameToonIds(name);
            if (toonIds.Any())
            {
                foreach (var toonId in toonIds)
                {
                    requestNames.Add(new()
                        {
                            Name = name,
                            ToonId = toonId
                        });
                }
            }
            else
            {
                // toastService.ShowWarning($"Players need at least 10 games to show up ({name})");
            }
        }

        return requestNames;
    }

    public void Dispose()
    {
        DecodeService.DecodeStateChanged += DecodeStateChanged;
    }
}
