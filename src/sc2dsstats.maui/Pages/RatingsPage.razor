@page "/ratings"
@using pax.dsstats.dbng.Services
@using pax.dsstats.shared;
@using sc2dsstats.maui.Services;
@inject MmrService MmrService
@inject IToastService ToastService
@inject DecodeService DecodeService
@inject IStatsService statsService
@implements IDisposable

<div class="d-flex mb-2">
    <div class="btn-group">
        <button class="btn btn-sm btn-primary" @onclick="RecalculateFire">(Re-)Calculate Ratings</button>
    </div>
    @if (isLoading)
    {
        <div class="spinner-border text-danger" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {

    }
</div>
<div>
    <sc2dsstats.razorlib.PlayerRatings RatingsRequest="ratingsRequest" @ref="playerRatings"></sc2dsstats.razorlib.PlayerRatings>
</div>
@code {
    private sc2dsstats.razorlib.PlayerRatings? playerRatings;
    private bool isLoading = false;
    private readonly object lockobject = new();

    private RatingsRequest ratingsRequest = new()
        {
            Skip = 0,
            Take = 20,
            Orders = new()
        {
            new()
            {
                Property = "Mmr",
                Ascending = false
            },

        }
        };

    protected override void OnInitialized()
    {
        //MmrService.Recalculated += MmrService_Recalculated;
        base.OnInitialized();
    }

    private async void RecalculateFire()
    {
        if (CantDoIt())
        {
            return;
        }
        lock (lockobject)
        {
            if (isLoading)
            {
                return;
            }
            isLoading = true;
        }

        await Task.Run(async () =>
        {
            await statsService.SeedPlayerInfos().ConfigureAwait(false);
            await MmrService.ReCalculate(DateTime.MinValue).ConfigureAwait(false);
        });

        isLoading = false;

        await InvokeAsync(() => StateHasChanged());

        //if (playerRatings != null)
        //{
        //    await playerRatings.Reload();
        //}
    }

    private bool CantDoIt()
    {
        if (DecodeService.IsRunning)
        {
            ToastService.ShowError("Please wait for the decoding to finish.", "Recalculate Error");
            return true;
        }
        return false;
    }

    private async void MmrService_Recalculated(object? sender, EventArgs e)
    {
        if (playerRatings != null)
        {
            await playerRatings.Reload();
        }
        isLoading = false;
    }

    public void Dispose()
    {
        //FireMmrService.Recalculated -= MmrService_Recalculated;
    }
}
