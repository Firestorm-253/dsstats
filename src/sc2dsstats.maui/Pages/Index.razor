@page "/"
@using pax.dsstats.dbng.Repositories
@using pax.dsstats.dbng.Services;
@using pax.dsstats.shared
@using sc2dsstats.maui.Services
@using sc2dsstats.razorlib
@inject IReplayRepository ReplayRepository
@inject DecodeService DecodeService
@inject UploadService UploadService
@inject IStatsService StatsService
@implements IDisposable

<div class="btn-group border border-3 rounded-2 border-light p-2">
    @if (DecodeService.IsRunning)
    {
        <button type="button" class="btn btn-outline-warning" @onclick="StopDecoding">StopDecoding</button>
    }
    else
    {
        <button type="button" class="btn btn-outline-danger" @onclick="Decode">Decode</button>

    }
    <button type="button" class="btn btn-outline-success" @onclick="ScanForNewReplays">Scan</button>
    <button type="button" class="btn btn-outline-info" @onclick="Upload">Upload</button>
    @if (DecodeService.WatchService != null)
    {
        @if (DecodeService.WatchService.IsWatching)
        {
            <button type="button" class="btn btn-outline-light" @onclick="e => DecodeService.WatchService.StopWatching()">Stop Watching</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-light" @onclick="e => DecodeService.WatchService.WatchForNewReplays()">Start Watching</button>
        }
    }
</div>

<div class="mt-3">
    @if (latestReplay != null)
    {
        <h3 class="text-warning p-2 bg-secondary">Latest Replay</h3>
        <sc2dsstats.razorlib.Replay.ReplayComponent replayDto="latestReplay"></sc2dsstats.razorlib.Replay.ReplayComponent>
    }
</div>
<div>
    @if (playerDetailInfo != null)
    {
        <h3 class="text-warning fw-bold bg-secondary p-2">Player Details</h3>
        <PlayerDetailsSubComponent PlayerDetailInfo="playerDetailInfo"></PlayerDetailsSubComponent>
    }
</div>

<UploadConfirmModal @ref="uploadConfirmModal"></UploadConfirmModal>

@code {
    ReplayDto? latestReplay = null;
    UploadConfirmModal? uploadConfirmModal;
    PlayerDetailInfo? playerDetailInfo;

    protected override void OnInitialized()
    {
        DecodeService.DecodeStateChanged += DecodeService_DecodeStateChanged;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadLatestReplay();
        }
        base.OnAfterRender(firstRender);
    }

    public void DecodeService_DecodeStateChanged(object? sender, DecodeEventArgs e)
    {
        if (e.Done == true)
        {
            _ = LoadLatestReplay();
        }
    }

    public async Task ScanForNewReplays()
    {
        await DecodeService.ScanForNewReplays();
    }

    private async Task LoadLatestReplay()
    {
        latestReplay = await ReplayRepository.GetLatestReplay();
        await InvokeAsync(() => StateHasChanged());
        if (UserSettingsService.UserSettings.BattleNetInfos != null)
        {
            var toonIds = UserSettingsService.UserSettings.BattleNetInfos.SelectMany(s => s.ToonIds).Select(s => s.ToonId).ToList();
            if (toonIds.Any())
            {
                var matchupInfos = (await StatsService.GetPlayerDetailInfo(toonIds)).ToList();
                playerDetailInfo = new PlayerDetailInfo()
                {
                    MatchupInfos = matchupInfos
                };
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private void Decode()
    {
        _ = DecodeService.DecodeParallel().ConfigureAwait(false);
    }

    private void StopDecoding()
    {
        DecodeService.StopDecoding();
    }

    private void Upload()
    {
        if (UserSettingsService.UserSettings.AllowUploads)
        {
            _ = UploadService.UploadReplays();
        }
        else
        {
            uploadConfirmModal?.Show();
        }
    }

    public void Dispose()
    {
        DecodeService.DecodeStateChanged -= DecodeService_DecodeStateChanged;
    }
}