@page "/"
@using System.Diagnostics;
@using pax.dsstats.dbng.Repositories
@using pax.dsstats.dbng.Services;
@using pax.dsstats.shared
@using sc2dsstats.maui.Services
@using sc2dsstats.razorlib
@using sc2dsstats.razorlib.Replay;
@inject IReplayRepository ReplayRepository
@inject DecodeService DecodeService
@inject UploadService UploadService
@inject IStatsService StatsService
@inject IToastService toastSerivce
@implements IDisposable

<div class="btn-group border border-3 rounded-2 border-light p-2">
    @if (DecodeService.IsRunning)
    {
        <button type="button" class="btn btn-outline-warning" @onclick="StopDecoding">StopDecoding</button>
    }
    else
    {
        <button type="button" class="btn btn-outline-danger" @onclick="Decode">Decode</button>

    }
    <button type="button" class="btn btn-outline-success" @onclick="ScanForNewReplays">Scan</button>
    <button type="button" class="btn btn-outline-info" @onclick="Upload">Upload</button>
    @if (!UserSettingsService.UserSettings.AllowCleanUploads && DecodeService.WatchService != null)
    {
        @if (DecodeService.WatchService.IsWatching)
        {
            <button type="button" class="btn btn-outline-light" @onclick="e => DecodeService.WatchService.StopWatching()">Stop Watching</button>
        }
        else
        {
            <button type="button" class="btn btn-outline-light" @onclick="e => DecodeService.WatchService.WatchForNewReplays()">Start Watching</button>
        }
    }
    @if (DEBUG)
    {
        <button type="button" class="btn btn-danger" @onclick="e => DecodeService.DEBUGDeleteLatestReplay()">D</button>
    }
</div>

<div class="mt-2">
    <div class="row">
        <div class="col-auto">
            @if (latestReplay != null)
            {
                <h3 class="text-warning p-2 bg-secondary">Latest Replay</h3>
                <sc2dsstats.razorlib.Replay.ReplayComponent @ref="replayComponent" replayDto="latestReplay"></sc2dsstats.razorlib.Replay.ReplayComponent>
            }
        </div>
        <div class="col-auto">
@*            @if (mmrService.MauiMmrProgress.Any())
            {
                <MmrProgressComponent MauiMmrProgress="mmrService.MauiMmrProgress"></MmrProgressComponent>
            }*@
        </div>
    </div>
</div>
<div class="mt-3">
    @if (playerDetailInfo != null)
    {
        <h3 class="text-warning fw-bold bg-secondary p-2">Player Details</h3>
        <PlayerDetailsSubComponent PlayerDetailInfo="playerDetailInfo"></PlayerDetailsSubComponent>
    }
</div>

@*<div class="btn-group">
    <button type="button" class="btn btn-primary" @onclick="DecodeService.DEBUGEmulateErrorsTest">Debug Errors</button>
</div>*@

<UploadConfirmModal @ref="uploadConfirmModal"></UploadConfirmModal>

@code {
    ReplayDto? latestReplay = null;
    UploadConfirmModal? uploadConfirmModal;
    PlayerDetailInfo? playerDetailInfo;
    TimeSpan elapsed = TimeSpan.Zero;
    ReplayComponent? replayComponent;

    private bool DEBUG = true;

    protected override void OnInitialized()
    {
        DecodeService.DecodeStateChanged += DecodeService_DecodeStateChanged;
        base.OnInitialized();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _ = LoadLatestReplay();
        }
        base.OnAfterRender(firstRender);
    }

    public void DecodeService_DecodeStateChanged(object? sender, DecodeEventArgs e)
    {
        if (e.Done == true)
        {
            _ = LoadLatestReplay();
        }
    }

    public async Task ScanForNewReplays()
    {
        await DecodeService.ScanForNewReplays();
    }

    private async Task LoadLatestReplay()
    {
        latestReplay = await ReplayRepository.GetLatestReplay();
        if (latestReplay != null)
        {
            replayComponent?.Init(latestReplay);
        }
        await InvokeAsync(() => StateHasChanged());
        if (UserSettingsService.UserSettings.BattleNetInfos != null)
        {
            var toonIds = UserSettingsService.UserSettings.BattleNetInfos.SelectMany(s => s.ToonIds).Select(s => s.ToonId).ToList();
            if (toonIds.Any())
            {
                var matchupInfos = (await StatsService.GetPlayerDetailInfo(toonIds)).ToList();
                playerDetailInfo = new PlayerDetailInfo()
                    {
                        MatchupInfos = matchupInfos
                    };
                await InvokeAsync(() => StateHasChanged());
            }
        }
    }

    private void Decode()
    {
        toastSerivce.ShowWarning("Start decoding");
        _ = DecodeService.DecodeParallel().ConfigureAwait(false);
    }

    private void StopDecoding()
    {
        DecodeService.StopDecoding();
    }

    private void Upload()
    {
        if (UserSettingsService.UserSettings.AllowCleanUploads)
        {
            _ = UploadService.UploadReplays();
        }
        else
        {
            uploadConfirmModal?.Show();
        }
    }

    public void Dispose()
    {
        DecodeService.DecodeStateChanged -= DecodeService_DecodeStateChanged;
    }
}